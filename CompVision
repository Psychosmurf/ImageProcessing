#include <CImg.h>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <sstream>

using namespace cimg_library;
using namespace std;

struct RGB
{
    float R;
    float G;
    float B;
};

struct BW
{
    float BW;
};

inline vector< vector<RGB> > loadPixData(string& fileName)
{
    CImg<float> img(fileName.c_str());

    int imgWidth  = img.width ();
    int imgHeight = img.height();

    vector< vector<RGB> > pixData;
    pixData.resize(imgWidth, vector<RGB>(imgHeight));

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            pixData[i][j].R = img(i, j, 0, 0);
            pixData[i][j].G = img(i, j, 0, 1);
            pixData[i][j].B = img(i, j, 0, 2);
        }
    }

    return pixData;
}

inline vector< vector<BW> > grayScale(vector< vector<RGB> >& pixData)
{
    vector< vector<BW> > outData;

    int imgWidth  = pixData.size();
    int imgHeight = pixData[0].size();

    outData.resize(imgWidth, vector<BW>(imgHeight));

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            float Y = pixData[i][j].R*0.2126 + pixData[i][j].G*0.7152 + pixData[i][j].B*0.0722;

            outData[i][j].BW = Y;
        }
    }

    return outData;
}

inline vector< vector<BW> > calcDeltaFrame(vector< vector<BW> >& frame1, vector< vector<BW> >& frame2)
{
    int imgWidth  = frame1.size();
    int imgHeight = frame1[0].size();

    vector< vector<BW> > delFrame;
    delFrame.resize(imgWidth, vector<BW>(imgHeight));

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            delFrame[i][j].BW = abs(frame1[i][j].BW - frame2[i][j].BW);
        }
    }

    return delFrame;
}

inline vector< vector<BW> > deltaThresh(vector< vector<BW> >& inFrame)
{
    int   imgWidth  = inFrame.size();
    int   imgHeight = inFrame[0].size();

    vector< vector<BW> > outFrame;
    outFrame.resize(imgWidth, vector<BW>(imgHeight));

    float maxVal    = 0;

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            if (inFrame[i][j].BW > maxVal)
            {
                maxVal = inFrame[i][j].BW;
            }
        }
    }

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            if (inFrame[i][j].BW > maxVal/2)
            {
                outFrame[i][j].BW = 255;
            }
            else
            {
                outFrame[i][j].BW = 0;
            }
        }
    }

    return outFrame;
}

float median(vector< vector<BW> >& inFrame, int& i, int& j)
{
    float med;

    vector<float> values;
    values.resize(8);

    values[0] = inFrame[i - 1][j - 1].BW;
    values[1] = inFrame[i][j - 1].BW;
    values[2] = inFrame[i + 1][j].BW;
    values[3] = inFrame[i - 1][j].BW;
    values[4] = inFrame[i + 1][j].BW;
    values[5] = inFrame[i - 1][j + 1].BW;
    values[6] = inFrame[i][j + 1].BW;
    values[7] = inFrame[i + 1][j + 1].BW;

    std::sort(values.begin(), values.end());

    med = (values[3] + values[4])/2.0;

    return med;
}

inline vector< vector<BW> > medianFilter(vector< vector<BW> >& inFrame)
{
    int imgWidth  = inFrame.size();
    int imgHeight = inFrame[0].size();

    vector< vector<BW> > outFrame;
    outFrame.resize(imgWidth, vector<BW>(imgHeight));

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            if (   i > 0
                && i < (imgWidth - 1)
                && j > 0
                && j < (imgHeight - 1))
            {
                outFrame[i][j].BW = median(inFrame, i, j);
            }
            else
            {
                outFrame[i][j].BW = inFrame[i][j].BW;
            }
        }
    }

    return outFrame;
}

void displayRGB(vector< vector<RGB> >& pixData)
{
    int imgWidth  = pixData.size();
    int imgHeight = pixData[0].size();

    CImg<float> outputImg(imgWidth, imgHeight, 1, 3);

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            outputImg(i, j, 0, 0) = pixData[i][j].R;
            outputImg(i, j, 0, 1) = pixData[i][j].G;
            outputImg(i, j, 0, 2) = pixData[i][j].B;
        }
    }

    outputImg.display("image");
}

void displayBW(vector< vector<BW> >& pixData)
{
    int imgWidth  = pixData.size();
    int imgHeight = pixData[0].size();

    CImg<float> outputImg(imgWidth, imgHeight, 1, 1);

    for (int i = 0; i < imgWidth; i++)
    {
        for (int j = 0; j < imgHeight; j++)
        {
            outputImg(i, j, 0, 0) = pixData[i][j].BW;
        }
    }

    outputImg.display("image");
}

int main()
{
    //these vectors will contain the pixel data of the background frame
    vector< vector<RGB> > backFrameRGB;
    vector< vector<BW>  > backFrameBW;

    string inFileName = "C:\\Users\\Nikola\\Desktop\\solebTest\\back.bmp";

    backFrameRGB = loadPixData(inFileName);
    backFrameBW  = grayScale(backFrameRGB);

    backFrameRGB.clear();

    for (int i = 2; i < 10; i++)
    {
        vector< vector<RGB> > frameRGB;
        vector< vector<BW>  > frameBW;

        vector< vector<BW>  > delFrame;

        stringstream _i;

        _i << i;

        inFileName = "C:\\Users\\Nikola\\Desktop\\solebTest\\scene000" + _i.str() + "1.bmp";

        frameRGB = loadPixData(inFileName);
        frameBW  = grayScale  (frameRGB);

        delFrame = calcDeltaFrame(backFrameBW, frameBW);
        delFrame = deltaThresh   (delFrame);
        delFrame = medianFilter  (delFrame);

        displayBW(delFrame);
    }

    return 0;
}
