#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace cv;
using namespace std;

struct BGR
{
    float B;
    float G;
    float R;
};

inline vector< vector<BGR> > grayScale(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            BGR pixel;

            pixel.B = input[i][j].R*0.2126 + input[i][j].G*0.7152 + input[i][j].B*0.0722;
            pixel.G = pixel.B;
            pixel.R = pixel.B;

            output[i][j] = pixel;
        }
    }

    return output;
}

/*-----------------------------------------------------------------------------------------------------------------
    These functions are for testing and visualizing the steps in the Harris-Detection algorithm, they are not meant
    to be an implementation of the algorithm.
  -----------------------------------------------------------------------------------------------------------------*/

//calculates the x-derivative by convolution with the horizontal kernel [1, 0 , -1]
inline vector< vector<BGR> > deriv_x(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 0; i < rows; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (-input[i][j - 1].B + input[i][j + 1].B + 255)/2.0; //convolution with normalization.
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculates the y-derivative by convolution with the vertical kernel [1, 0 , -1]
inline vector< vector<BGR> > deriv_y(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            output[i][j].B = (-input[i + 1][j].B + input[i - 1][j].B + 255)/2.0; //convolution with normalization.
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//averages for the x-direction by convolution with the vertical kernel [1, 2, 1]
inline vector< vector<BGR> > avg_x(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            output[i][j].B = (3*input[i - 1][j].B + 10*input[i][j].B + 3*input[i + 1][j].B)/4080.0*255.0; //convolution with normalization
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//averages for the y-direction by convolution with the horizontal kernel [1, 2, 1]
inline vector< vector<BGR> > avg_y(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 0; i < rows; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (3*input[i][j - 1].B + 10*input[i][j].B + 3*input[i][j - 1].B)/4080.0*255.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculates the sobel x-derivative
inline vector< vector<BGR> > G_x(vector< vector<BGR> >& input)
{
    vector< vector<BGR> > output;

    output = deriv_x(input);
    output = avg_x  (output);

    return output;
}

//calculates the sobel y-derivative
inline vector< vector<BGR> > G_y(vector< vector<BGR> >& input)
{
    vector< vector<BGR> > output;

    output = deriv_y(input);
    output = avg_y  (output);

    return output;
}

//calculates the sobel operator
inline vector< vector<BGR> > sobelOp(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > input_x = G_x(input);
    vector< vector<BGR> > input_y = G_y(input);

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = abs((input_x[i][j].B + input_y[i][j].B)/2 - 255.0/2)*2;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculates the product G_x*G_x
inline vector< vector<BGR> > G_x_squared(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    output = G_x(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (output[i][j].B * output[i][j].B)/255.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculates the product G_y*G_y
inline vector< vector<BGR> > G_y_squared(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    output = G_y(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (output[i][j].B * output[i][j].B)/255.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculates the product G_x*G_y
inline vector< vector<BGR> > G_x_G_y(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > G_x_input;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > G_y_input;
    output.resize(rows, vector<BGR>(cols));

    G_x_input = G_x(input);
    G_y_input = G_y(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (G_x_input[i][j].B*G_y_input[i][j].B)/500.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//sum G_x^2 over mask
inline vector< vector<BGR> > sum_G_x(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > G_x_2;
    G_x_2 = G_x_squared(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = 0;

            for (int k = -1; k <= 1; k++)
            {
                for (int m = -1; m <= 1; m++)
                {
                    output[i][j].B = (output[i][j].B + G_x_2[i + k][j + m].B);
                }
            }

            output[i][j].B = output[i][j].B/9.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//sum G_y^2 over mask
inline vector< vector<BGR> > sum_G_y(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > G_y_2;
    G_y_2 = G_y_squared(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = 0;

            for (int k = -1; k <= 1; k++)
            {
                for (int m = -1; m <= 1; m++)
                {
                    output[i][j].B = output[i][j].B + G_y_2[i + k][j + m].B;
                }
            }

            output[i][j].B = output[i][j].B/9.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//sum G_x*G_y over mask
inline vector< vector<BGR> > sum_G_x_G_y(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > G_x_G_y_input;
    G_x_G_y_input = G_x_G_y(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = 0;

            for (int k = -1; k <= 1; k++)
            {
                for (int m = -1; m <= 1; m++)
                {
                    output[i][j].B = output[i][j].B + G_x_G_y_input[i + k][j + m].B;
                }
            }

            output[i][j].B = output[i][j].B/9.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculate determinant of the structure tensor
inline vector< vector<BGR> > det_A(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > GxSum   = sum_G_x    (input);
    vector< vector<BGR> > GySum   = sum_G_y    (input);
    vector< vector<BGR> > GxGySum = sum_G_x_G_y(input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (GxSum[i][j].B * GySum[i][j].B - GxGySum[i][j].B * GxGySum[i][j].B)/255.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//calculate the trace of the structure tensor
inline vector< vector<BGR> > tr_A(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > GxSum   = sum_G_x    (input);
    vector< vector<BGR> > GySum   = sum_G_y    (input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = (GxSum[i][j].B + GySum[i][j].B)/2.0;
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

//the response function represents the "point-likeness" of a pixel
inline vector< vector<BGR> > response(vector< vector<BGR> >& input)
{
    int rows = input.size();
    int cols = input[0].size();

    vector< vector<BGR> > output;
    output.resize(rows, vector<BGR>(cols));

    vector< vector<BGR> > detA = det_A(input);
    vector< vector<BGR> > trA  = tr_A (input);

    for (int i = 1; i < rows - 1; i++)
    {
        for (int j = 1; j < cols - 1; j++)
        {
            output[i][j].B = detA[i][j].B/trA[i][j].B*255;  //the 255 term here is not part of the response function
                                                            //its just there for visualization and testing.
            output[i][j].G = output[i][j].B;
            output[i][j].R = output[i][j].B;
        }
    }

    return output;
}

/*-----------------------------------------------------------------------------------------------------------------
    These functions are for testing and visualizing the steps in the Harris-Detection algorithm, they are not meant
    to be an implementation of the algorithm.
  -----------------------------------------------------------------------------------------------------------------*/

int main()
{
    namedWindow("input" , CV_WINDOW_NORMAL);
    namedWindow("output", CV_WINDOW_NORMAL);

    string       inFileName = "test0.flv";
    VideoCapture inVideo    = VideoCapture(inFileName.c_str());

    Mat frame;

    while(1)
    {
        inVideo >> frame;

        imshow("input" , frame);

        vector< vector<BGR> > inVec;
        inVec.resize(frame.rows, vector<BGR>(frame.cols));

        for (int i = 0; i < frame.rows; i++)
        {
            for (int j = 0; j < frame.cols; j++)
            {
                BGR pixel;

                pixel.B = frame.data[frame.step[0]*i + frame.step[1]*j + 0];
                pixel.G = frame.data[frame.step[0]*i + frame.step[1]*j + 1];
                pixel.R = frame.data[frame.step[0]*i + frame.step[1]*j + 2];

                inVec[i][j] = pixel;
            }
        }

        inVec = grayScale  (inVec);
        inVec = response   (inVec);

        for (int i = 0; i < frame.rows; i++)
        {
            for (int j = 0; j < frame.cols; j++)
            {
                BGR pixel2 = inVec[i][j];

                frame.data[frame.step[0]*i + frame.step[1]*j + 0] = pixel2.B;
                frame.data[frame.step[0]*i + frame.step[1]*j + 1] = pixel2.G;
                frame.data[frame.step[0]*i + frame.step[1]*j + 2] = pixel2.R;
            }
        }

        inVec.clear();

        imshow("output", frame);

        char c = cvWaitKey(33);
        if (c == 27) break;
    }

    return 0;
}
